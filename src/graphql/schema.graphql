directive @client on FIELD | FIELD_DEFINITION

type Query {
  me: RegisterResponse

  # client side queries
  auth: RegisterResponse
  cartInfo: [ShoppingCart]
  cartTotalAmount: Float!

  departments: [Department]
  attributes(name: String): [Attribute]
  # used by filter's price slider range
  priceRange: PriceRange!

  products(
    inCategory: [Int]
    inColor: [Int]
    inSize: [Int]
    inPrice: [Int]
    sortBy: ProductSort
    page: Int
    perPage: Int
    search: String
  ): ProductResponse

  product(product_id: Int!): Product

  generateUniqueCartId: String!

  cart(cart_id: String!): [ShoppingCart]
  getSaved(cart_id: String!): [ShoppingCart]
  totalAmount(cart_id: String!): Float!

  shippingRegions: [ShippingRegion]

  orderFee(
    cart_id: String!
    shipping_region_id: Int!
    shipping_id: Int!
  ): [Fee]
}

type Mutation {
  customerRegister(
    name: String!
    email: String!
    password: String!
  ): RegisterResponse

  # prettier-ignore
  customerLogin(
		email: String!
		password: String!
	): RegisterResponse

  customerLogout: Boolean

  addProductReview(
    product_id: Int!
    review: String!
    rating: Int!
  ): Review

  addToCart(
    cart_id: String!
    product_id: Int!
    attributes: String!
  ): [ShoppingCart!]
  updateCart(item_id: Int!, quantity: Int!): [ShoppingCart]
  removeItem(item_id: Int!): [ShoppingCart]
  # returns an empty array after removal
  emptyCart(cart_id: String!): [ShoppingCart]
  moveToCart(item_id: Int!): [ShoppingCart]
  saveForLater(item_id: Int!): [ShoppingCart]

  # returns stripe intent token
  checkout(
    cart_id: String!
    fullname: String!
    address: String!
    city: String!
    state: String!
    country: String!
    zip: String!
    shipping_region_id: Int!
    shipping_id: Int!
  ): String!
}

type RegisterResponse {
  customer_id: Int!
  name: String!
  email: String!
  address_1: String
  address_2: String
  city: String
  region: String
  postal_code: String
  country: String
  shipping_region_id: Int!
  day_phone: String
  eve_phone: String
  mob_phone: String
  credit_card: String
  accessToken: String!
  expires_in: String!
}

type Department {
  department_id: Int!
  name: String!
  description: String
  categories: [Category]
}

type Category {
  category_id: Int!
  department_id: Int!
  name: String!
  description: String
}

type Attribute {
  attribute_id: Int!
  name: String!
  value: String!
}

type PriceRange {
  max: Float!
  min: Float!
}

type ProductResponse {
  metadata: PaginationMetadata
  data: [Product]
}

type PaginationMetadata {
  totalItems: Int!
  currentPage: Int!
  pageSize: Int!
  totalPages: Int!
  startPage: Int!
  endPage: Int!
  startIndex: Int!
  endIndex: Int!
  pages: [Int!]
}

type Product {
  product_id: Int!
  name: String!
  description: String!
  price: Float!
  discounted_price: Float!
  image: String
  image_2: String
  thumbnail: String
  display: Int!

  colors: [Attribute]
  sizes: [Attribute]
  categories: [Category]

  reviews(cursor: String, count: Int): ReviewResponse
}

enum ProductSort {
  name
  price
}

type ReviewOwner {
  customer_id: Int!
  name: String!
  email: String!
}

type Review {
  review_id: Int!
  owner: ReviewOwner!
  product_id: Int!
  review: String!
  rating: Int!
  created_on: String!
}

type ReviewResponse {
  data: [Review]
  # will be null if next page isn't available
  next_cursor: String
}

type ShoppingCart {
  item_id: Int!
  name: String!
  attributes: String!
  product_id: Int!
  price: Float!
  quantity: Int!
  image: String!
  subtotal: Float!
}

type ShippingRegion {
  shipping_region_id: Int!
  shipping_region: String!
  shippingTypes: [ShippingType]
  tax: Tax!
}

type ShippingType {
  shipping_id: Int!
  shipping_type: String!
  shipping_cost: Float!
  shipping_region_id: Int!
}

type Tax {
  tax_id: Int!
  tax_type: String!
  tax_percentage: Float!
}

type Fee {
  type: String!
  title: String!
  value: Float!
}
